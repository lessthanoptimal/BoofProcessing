apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compileOnly group: 'org.processing', name: 'core', version: '3.3.7'
    compile group: 'org.boofcv', name: 'boofcv-core', version: '0.36'
}

test {
    ignoreFailures true
    reports.html.enabled = true
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'resources/src'
        }
    }

    test {
        java {
            srcDir 'test'
            srcDir 'generate'
            srcDir 'benchmark'
        }
        resources {
            srcDir 'resources/test'
        }
    }
}


task dependenciesJar(type: Jar, dependsOn:jar) {

    dependsOn configurations.runtimeClasspath

    from { (configurations.runtimeClasspath).findAll { it.name.endsWith('jar') }.
            collect { zipTree(it) } } {  exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA' }

    outputs.upToDateWhen { false }

    destinationDir = file('./')
    archiveName = 'boofcv_dependencies.jar'
}

task processingJar(type: Jar, dependsOn:jar ) {

    dependsOn dependenciesJar

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)

    destinationDir = file('./')
    archiveName = 'boofcv_processing.jar'
}

task processingJavaDoc(type: Javadoc) {
    source = sourceSets.main.allJava

    // provide references to external javadoc
    configure(options) {
        failOnError = false
        links = ['http://docs.oracle.com/javase/8/docs/api/',
                 'http://ejml.org/javadoc/',
                 'http://georegression.org/javadoc/',
                 'http://ddogleg.org/javadoc/',
                 'http://boofcv.org/javadoc/',
                 'http://processing.org/reference/javadoc/core/']
    }
}

def myCopy( src , dst ) {
    assert file(src).exists()
    copy {
        from src
        into dst
    }
}

task processingDirectory( dependsOn:[processingJar,processingJavaDoc]) {

    file('tmp').deleteDir()
    file('tmp/boofcv_processing').mkdirs()
    file('tmp/boofcv_processing/reference').mkdirs()
    file('tmp/boofcv_processing/src').mkdir()
    file('tmp/boofcv_processing/examples').mkdir()
    file('tmp/boofcv_processing/data').mkdir()
    file('tmp/boofcv_processing/library').mkdir()

    doLast {
        myCopy( 'examples',                             'tmp/boofcv_processing/examples')
        myCopy( 'data/example/particles01.jpg',         'tmp/boofcv_processing/examples/Contours')
        myCopy( 'data/example/simple_objects.jpg',      'tmp/boofcv_processing/examples/Gradient')
        myCopy( 'data/example/simple_objects.jpg',      'tmp/boofcv_processing/examples/PolygonFitting')
        myCopy( 'data/example/shapes/shapes02.png',     'tmp/boofcv_processing/examples/EllipseFitting')
        myCopy( 'data/example/segment/berkeley_horses.jpg', 'tmp/boofcv_processing/examples/ImageSegmentation')
        myCopy( 'data/example/denseflow/Urban2_07.png', 'tmp/boofcv_processing/examples/DenseOpticalFlow')
        myCopy( 'data/example/denseflow/Urban2_08.png', 'tmp/boofcv_processing/examples/DenseOpticalFlow')
        myCopy( 'data/example/cave_01.jpg',             'tmp/boofcv_processing/examples/AssociateInterestPoints')
        myCopy( 'data/example/cave_02.jpg',             'tmp/boofcv_processing/examples/AssociateInterestPoints')
        myCopy( 'data/example/kayak_02.jpg',            'tmp/boofcv_processing/examples/DetectInterestPoints')
        myCopy( 'data/example/enhance/dark.png',        'tmp/boofcv_processing/examples/ImageEnhancement')
        myCopy( 'data/example/simple_objects.jpg',      'tmp/boofcv_processing/examples/DetectLines')
        myCopy( 'data/example/goals_and_stuff.jpg',     'tmp/boofcv_processing/examples/RemovePerspective')
        myCopy( 'data/example/template/desktop.png',    'tmp/boofcv_processing/examples/Templates')
        myCopy( 'data/example/template/cursor.png',     'tmp/boofcv_processing/examples/Templates')
        myCopy( 'data/example/template/cursor_mask.png', 'tmp/boofcv_processing/examples/Templates')
        myCopy( 'data/example/spherical/equirectangular_half_dome_01.jpg','tmp/boofcv_processing/examples/EquiToPinhole')
        myCopy( 'data/example/recognition/pixabay/cat01.jpg','tmp/boofcv_processing/examples/ImageClassification')
        myCopy( javadoc.destinationDir,                 'tmp/boofcv_processing/reference')
        myCopy( 'src',                                  'tmp/boofcv_processing/src')
        myCopy( 'library.properties',                   'tmp/boofcv_processing')
        myCopy( 'boofcv_dependencies.jar',              'tmp/boofcv_processing/library')
        myCopy( 'boofcv_processing.jar',                'tmp/boofcv_processing/library')
    }
}

task processingZip( type: Zip, dependsOn:processingDirectory) {
    from 'tmp'

    destinationDir = file('./')
    archiveName = 'boofcv_processing.zip'
}

wrapper {
    distributionType = Wrapper.DistributionType.BIN
    gradleVersion = '6.4.1'
}
